###introduction of bouncycastle and JAVA provider

+Bouncy Castle 이란 확장된 기능을 가진 자바암호라이브러리라고 합니다. 인증서 활용 환경이 잘되어 있다고 합니다. 
+JCA는 Runtime environment의 일부이며, JCE는 JDK에 들어 있지 않은 JCA의 확장팩, JDK는 JCA에 정의된 특정한 암호 함수만 사용가능
+JCE는 JDK에 들어있지 않은 JCA의 확장팩이라고 하는데, JDK 1.4이상부터는 모든 JDK 버전에 JCE가 들어 있다고 합니다.

#bouncycastle 설치
+ http://www.bouncycastle.org/latest_releases.html에서 자신의 JDK 버전에 해당되는 최신 버전을 다운로드 받는다. 다운받은 파일을 JDK과 JRE가 설치된 폴더에서 jre/lib/ext에 저장한다.
+ jre/lib/security 폴더에 있는 java.security 파일을 예를들어 다음과 같이 수정한다. 
+ security.provider.1=sun.security.provider.Sun
+ security.provider.2=sun.security.rsa.SunRsaSign
+ security.provider.3=sun.security.ec.SunEC
+ security.provider.4=com.sun.net.ssl.internal.ssl.Provider
+ security.provider.5=com.sun.crypto.provider.SunJCE
+ security.provider.6=sun.security.jgss.SunProvider
+ security.provider.7=com.sun.security.sasl.Provider
+ security.provider.8=org.jcp.xml.dsig.internal.dom.XMLDSigRI
+ security.provider.9=sun.security.smartcardio.SunPCSC
+ security.provider.10=sun.security.mscapi.SunMSCAPI
+ 추가
+ security.provider.11=org.bouncycastle.jce.provider.BouncyCastleProvider

# unrestricted policy 파일들을 다운받아 jre/lib/security 디렉토리에 local_policy.jar와 US_export_policy.jar 파일을 교체한다.

#테스트 소스
+ String providerName = "BC";

KeyGenerator keyGenerator = null;

if (Security.getProvider(providerName) == null)

   System.out.println(providerName + " provider not installed");

else

   System.out.println(providerName + " is installed");


+ 설치 제대로 되면 console 창에 BC is installed 이렇게 나옵니다.






